/*
 * Paper - An application for storing & loading data using QR codes.
 * Copyright (C) 2014  Axel Rasmussen
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "CompressionTest.h"

#include "PaperCommon/Compression/LZMA.h"

#include <cstddef>
#include <cstdint>
#include <cstring>
#include <functional>
#include <memory>

namespace
{
	/**
	 * \brief This constant defines some data we can try to compress.
	 */
	const uint8_t TEST_DATA[] = {
		0x2f, 0x2a, 0x0d, 0x0a, 0x20, 0x2a, 0x20, 0x50, 0x61, 0x70,
		0x65, 0x72, 0x20, 0x2d, 0x20, 0x41, 0x6e, 0x20, 0x61, 0x70,
		0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20,
		0x66, 0x6f, 0x72, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x6e,
		0x67, 0x20, 0x26, 0x20, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e,
		0x67, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x75, 0x73, 0x69,
		0x6e, 0x67, 0x20, 0x51, 0x52, 0x20, 0x63, 0x6f, 0x64, 0x65,
		0x73, 0x2e, 0x0d, 0x0a, 0x20, 0x2a, 0x20, 0x43, 0x6f, 0x70,
		0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x28, 0x43, 0x29,
		0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x20, 0x41, 0x78, 0x65,
		0x6c, 0x20, 0x52, 0x61, 0x73, 0x6d, 0x75, 0x73, 0x73, 0x65,
		0x6e, 0x0d, 0x0a, 0x20, 0x2a, 0x0d, 0x0a, 0x20, 0x2a, 0x20,
		0x54, 0x68, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72,
		0x61, 0x6d, 0x20, 0x69, 0x73, 0x20, 0x66, 0x72, 0x65, 0x65,
		0x20, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x3a,
		0x20, 0x79, 0x6f, 0x75, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x72,
		0x65, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
		0x65, 0x20, 0x69, 0x74, 0x20, 0x61, 0x6e, 0x64, 0x2f, 0x6f,
		0x72, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x0d, 0x0a,
		0x20, 0x2a, 0x20, 0x69, 0x74, 0x20, 0x75, 0x6e, 0x64, 0x65,
		0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x65, 0x72, 0x6d,
		0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x47,
		0x4e, 0x55, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
		0x20, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x4c, 0x69,
		0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x61, 0x73, 0x20, 0x70,
		0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x20, 0x62,
		0x79, 0x0d, 0x0a, 0x20, 0x2a, 0x20, 0x74, 0x68, 0x65, 0x20,
		0x46, 0x72, 0x65, 0x65, 0x20, 0x53, 0x6f, 0x66, 0x74, 0x77,
		0x61, 0x72, 0x65, 0x20, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61,
		0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x65, 0x69, 0x74, 0x68,
		0x65, 0x72, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
		0x20, 0x33, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
		0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2c, 0x20, 0x6f,
		0x72, 0x0d, 0x0a, 0x20, 0x2a, 0x20, 0x28, 0x61, 0x74, 0x20,
		0x79, 0x6f, 0x75, 0x72, 0x20, 0x6f, 0x70, 0x74, 0x69, 0x6f,
		0x6e, 0x29, 0x20, 0x61, 0x6e, 0x79, 0x20, 0x6c, 0x61, 0x74,
		0x65, 0x72, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
		0x2e, 0x0d, 0x0a, 0x20, 0x2a, 0x0d, 0x0a, 0x20, 0x2a, 0x20,
		0x54, 0x68, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72,
		0x61, 0x6d, 0x20, 0x69, 0x73, 0x20, 0x64, 0x69, 0x73, 0x74,
		0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x20, 0x69, 0x6e,
		0x20, 0x74, 0x68, 0x65, 0x20, 0x68, 0x6f, 0x70, 0x65, 0x20,
		0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x74, 0x20, 0x77, 0x69,
		0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x75, 0x73, 0x65, 0x66,
		0x75, 0x6c, 0x2c, 0x0d, 0x0a, 0x20, 0x2a, 0x20, 0x62, 0x75,
		0x74, 0x20, 0x57, 0x49, 0x54, 0x48, 0x4f, 0x55, 0x54, 0x20,
		0x41, 0x4e, 0x59, 0x20, 0x57, 0x41, 0x52, 0x52, 0x41, 0x4e,
		0x54, 0x59, 0x3b, 0x20, 0x77, 0x69, 0x74, 0x68, 0x6f, 0x75,
		0x74, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65,
		0x20, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x20, 0x77,
		0x61, 0x72, 0x72, 0x61, 0x6e, 0x74, 0x79, 0x20, 0x6f, 0x66,
		0x0d, 0x0a, 0x20, 0x2a, 0x20, 0x4d, 0x45, 0x52, 0x43, 0x48,
		0x41, 0x4e, 0x54, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59,
		0x20, 0x6f, 0x72, 0x20, 0x46, 0x49, 0x54, 0x4e, 0x45, 0x53,
		0x53, 0x20, 0x46, 0x4f, 0x52, 0x20, 0x41, 0x20, 0x50, 0x41,
		0x52, 0x54, 0x49, 0x43, 0x55, 0x4c, 0x41, 0x52, 0x20, 0x50,
		0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x2e, 0x20, 0x20, 0x53
	};

	/**
	 * \brief This constant defines the length of our test data.
	 */
	const std::size_t TEST_DATA_SIZE =
		sizeof(TEST_DATA) / sizeof(TEST_DATA[0]);
}

namespace paper
{
	namespace tests
	{
		/**
		 * This is our default constructor, which creates a new
		 * instance of our compression tests.
		 */
		CompressionTest::CompressionTest()
			: vrfy::Test()
		{
		}

		/**
		 * This is our default destructor, which cleans up & destroys
		 * this object.
		 */
		CompressionTest::~CompressionTest()
		{
		}

		/**
		 * This function provides the main entrypoint for this class's
		 * unit tests.
		 */
		void CompressionTest::test()
		{
			using namespace compression;
			using namespace vrfy::assert;

			std::shared_ptr<uint8_t> original(
				new uint8_t[TEST_DATA_SIZE],
				[](uint8_t *p)
				{
					delete[] p;
				});
			memcpy(original.get(), TEST_DATA, TEST_DATA_SIZE);

			std::shared_ptr<uint8_t> compressed;
			std::size_t compressedSize = lzmaCompress(
				compressed, original.get(), TEST_DATA_SIZE);

			std::shared_ptr<uint8_t> decompressed;
			std::size_t decompressedSize = lzmaDecompress(
				decompressed, compressed.get(), compressedSize);

			assertEquals(TEST_DATA_SIZE, decompressedSize);

			for(std::size_t i = 0; i < TEST_DATA_SIZE; ++i)
			{
				assertEquals(original.get()[i],
					decompressed.get()[i]);
			}
		}
	}
}
